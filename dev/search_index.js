var documenterSearchIndex = {"docs":
[{"location":"man/propagators/j2osc/#J2-Osculating-Analytical-Orbit-Propagator","page":"J2 Osculating","title":"J2 Osculating Analytical Orbit Propagator","text":"","category":"section"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"This algorithm uses the J2 propagator to obtain the secular effects of the Keplerian elements caused only by the J2 term of the geopotential field. Afterward, it adds short-term perturbations. This model is useful when fitting an orbit to a set of mean elements for the J2 orbit propagator. Hence, we can use it to verify, for example, how close a satellite is from a Sun-Synchronous orbit.","category":"page"},{"location":"man/propagators/j2osc/#Algorithm","page":"J2 Osculating","title":"Algorithm","text":"","category":"section"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"The algorithm implemented here is based on [1].","category":"page"},{"location":"man/propagators/j2osc/#Initialization","page":"J2 Osculating","title":"Initialization","text":"","category":"section"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"We can initialize the J2 osculating analytical orbit propagator with the following function:","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"function Propagators.init(Val(:J2osc), orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"which creates a J2 osculating propagator structure OrbitPropagatorJ2Osculating with the mean Keplerian elements orb₀. It supports the following positional arguments:","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"orb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"The following keyword selects the gravitational constants for the propagation algorithm:","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"j2c::J2PropagatorConstants: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"This package contains some pre-built propagation constants for this propagator:","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"J2 Propagator Constant Description Type\nj2c_egm2008 EGM-2008 gravitational constants Float64\nj2c_egm2008_f32 EGM-2008 gravitational constants Float32\nj2c_egm1996 EGM-1996 gravitational constants Float64\nj2c_egm1996_f32 EGM-1996 gravitational constants Float32\nj2c_jgm02 JGM-02 gravitational constants Float64\nj2c_jgm02_f32 JGM-02 gravitational constants Float32\nj2c_jgm03 JGM-03 gravitational constants Float64\nj2c_jgm03_f32 JGM-03 gravitational constants Float32","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"note: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.","category":"page"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"julia> orb = KeplerianElements(\n           date_to_jd(2023, 1, 1, 0, 0, 0),\n           7190.982e3,\n           0.001111,\n           98.405 |> deg2rad,\n           100    |> deg2rad,\n           90     |> deg2rad,\n           19     |> deg2rad\n       )\nKeplerianElements{Float64, Float64}:\n           Epoch :    2.45995e6 (2023-01-01T00:00:00)\n Semi-major axis : 7190.98     km\n    Eccentricity :    0.001111\n     Inclination :   98.405    °\n            RAAN :  100.0      °\n Arg. of Perigee :   90.0      °\n    True Anomaly :   19.0      °\n\njulia> orbp = Propagators.init(Val(:J2osc), orb)\nOrbitPropagatorJ2Osculating{Float64, Float64}:\n   Propagator name : J2 Osculating Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-01T00:00:00","category":"page"},{"location":"man/propagators/j2osc/#References","page":"J2 Osculating","title":"References","text":"","category":"section"},{"location":"man/propagators/j2osc/","page":"J2 Osculating","title":"J2 Osculating","text":"[1] Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. 4th ed. Microcosm Press, Hawthorn, CA, USA.","category":"page"},{"location":"man/propagators/sgp4/#SGP4/SDP4","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"","category":"section"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"This package implements the interface to the SGP4/SDP4 propagator provided by SatelliteToolboxSgp4.jl.","category":"page"},{"location":"man/propagators/sgp4/#Algorithm","page":"SGP4/SDP4","title":"Algorithm","text":"","category":"section"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"The SGP4/SDP4 implementation was built using [1, 2, 3].","category":"page"},{"location":"man/propagators/sgp4/#Initialization","page":"SGP4/SDP4","title":"Initialization","text":"","category":"section"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"We must initialize the SGP4/SDP4 propagator with a two-line element set (TLE) using the following function:","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"function Propagators.init(Val(:SGP4), tle::TLE; kwargs...)","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"which creates a SGP4/SDP4 propagator structure OrbitPropagatorSgp4 with the tle. The following keyword selects the gravitational constants for the propagation algorithm:","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"sgp4c::Sgp4Constants: SGP4 orbit propagator constants (see Sgp4Constants).   (Default = sgp4c_wgs84)","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"The package [SatelliteToolboxSgp4.jl] contains some pre-build constants for this propagator:","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"SGP4/SDP4 Propagator Constants Description Type\nsgp4c_wgs84 Constants based on WGS-84 Float64\nsgp4c_wgs84_f32 Constants based on WGS-84 Float32\nsgp4c_wgs72 Constants based on WGS-72 Float64\nsgp4c_wgs72_f32 Constants based on WGS-72 Float32","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"note: Note\nThe type used in the propagation will be the same as used to define the constants in the structure sgp4c.","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"note: Note\nThe package SatelliteToolboxTle.jl defines the type TLE, which is re-exported here. It contains some useful functionalities, such as TLE fetching from online services. For more information, refer to the package documentation.","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"julia> tle = tle\"\"\"\n       AMAZONIA 1\n       1 47699U 21015A   23083.68657856 -.00000044  10000-8  43000-4 0  9990\n       2 47699  98.4304 162.1097 0001247 136.2017 223.9283 14.40814394108652\"\"\"\nTLE:\n                     Name : AMAZONIA 1\n         Satellite number : 47699\n International designator : 21015A\n       Epoch (Year / Day) : 23 /  83.68657856 (2023-03-24T16:28:40.388)\n       Element set number : 999\n             Eccentricity :   0.00012470 deg\n              Inclination :  98.43040000 deg\n                     RAAN : 162.10970000 deg\n      Argument of perigee : 136.20170000 deg\n             Mean anomaly : 223.92830000 deg\n          Mean motion (n) :  14.40814394 revs/day\n        Revolution number : 10865\n                       B* : 0.000043 1/[er]\n                    ṅ / 2 : -0.000000 rev/day²\n                    n̈ / 6 : 0.000000 rev/day³\n\njulia> Propagators.init(Val(:SGP4), tle)\nOrbitPropagatorSgp4{Float64, Float64}:\n   Propagator name : SGP4 Orbit Propagator\n  Propagator epoch : 2023-03-24T16:28:40.388\n  Last propagation : 2023-03-24T16:28:40.388","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"We also support initializing an SGP4/SDP4 propagator passing the TLE information in individual terms:","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"function Propagators.init(Val(:SGP4), epoch::Number, n₀::Number, e₀::Number, i₀::Number, Ω₀::Number, ω₀::Number, M₀::Number, bstar::Number; kwargs...)","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"where:","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"epoch::Number: Epoch of the orbital elements [Julian Day].\nn₀::Number: SGP type \"mean\" mean motion at epoch [rad/s].\ne₀::Number: \"Mean\" eccentricity at epoch.\ni₀::Number: \"Mean\" inclination at epoch [rad].\nΩ₀::Number: \"Mean\" longitude of the ascending node at epoch [rad].\nω₀::Number: \"Mean\" argument of perigee at epoch [rad].\nM₀::Number: \"Mean\" mean anomaly at epoch [rad].\nbstar::Number: Drag parameter (B*).","category":"page"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"The keywords kwargs... are the same as in the first version of this function.","category":"page"},{"location":"man/propagators/sgp4/#References","page":"SGP4/SDP4","title":"References","text":"","category":"section"},{"location":"man/propagators/sgp4/","page":"SGP4/SDP4","title":"SGP4/SDP4","text":"[1] Hoots, F. R., Roehrich, R. L (1980). Models for Propagation of NORAD Elements Set. Spacetrack Report No. 3.\n[2] Vallado, D. A., Crawford, P., Hujsak, R., Kelso, T. S (2006). Revisiting Spacetrack Report #3: Rev1. AIAA.\n[3] SGP4 Source code of STRF, which the C code was converted by Paul. S. Crawford and Andrew R. Brooks.","category":"page"},{"location":"man/propagators/twobody/#Two-Body-Analytical-Propagator","page":"Two-Body","title":"Two Body Analytical Propagator","text":"","category":"section"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"The two-body analytical orbit propagator considers the Earth a perfect sphere with uniform density. Hence, it propagates the orbit using the solution considering Newtonian gravity. It has an extremely low precision but with a minimal computational burden. Thus, it is helpful in some analysis that requires propagating the orbit many times for short periods.","category":"page"},{"location":"man/propagators/twobody/#Algorithm","page":"Two-Body","title":"Algorithm","text":"","category":"section"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"The algorithm implemented here is based on [1].","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"Since we are considering a spherical Earth with uniform density, gravity points towards the center of Earth. Thus, we propagate the orbit by updating the satellite mean anomaly since all other Keplerian elements do not change. The equation to correct the mean anomaly is:","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"M(t) = M_0 + sqrtfracmua_0^3 cdot left(t - t_0right)","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"where t_0 is the initial mean elements' epoch, a_0 is the mean semi-major axis, and mu the Earth's standard gravitational parameter.","category":"page"},{"location":"man/propagators/twobody/#Initialization","page":"Two-Body","title":"Initialization","text":"","category":"section"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"We can initialize the two-body analytical propagator with the following function:","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"function Propagators.init(Val(:TwoBody), orb₀::KeplerianElements; kwargs...)","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"which creates a two-body propagator structure OrbitPropagatorTwoBody with the mean Keplerian elements orb₀. The following keyword selects the standard gravitational parameter for the propagation algorithm:","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"μ::T: Standard gravitational parameter of the central body [m³/s²].   (Default = tbc_m0)","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"This package contains some pre-built gravitational parameters of the Earth for this propagator:","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"Two-Body Propagator Constant Description Type\ntbc_m0 Earth's standard gravitational parameter Float64\ntbc_m0_f32 Earth's standard gravitational parameter Float32","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"note: Note\nThe type used in the propagation will be the same as used to define the gravitational constant μ.","category":"page"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"julia> orb = KeplerianElements(\n           date_to_jd(2023, 1, 1, 0, 0, 0),\n           7190.982e3,\n           0.001111,\n           98.405 |> deg2rad,\n           100    |> deg2rad,\n           90     |> deg2rad,\n           19     |> deg2rad\n       )\nKeplerianElements{Float64, Float64}:\n           Epoch :    2.45995e6 (2023-01-01T00:00:00)\n Semi-major axis : 7190.98     km\n    Eccentricity :    0.001111\n     Inclination :   98.405    °\n            RAAN :  100.0      °\n Arg. of Perigee :   90.0      °\n    True Anomaly :   19.0      °\n\njulia> orbp = Propagators.init(Val(:TwoBody), orb)\nOrbitPropagatorTwoBody{Float64, Float64}:\n   Propagator name : Two-Body Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-01T00:00:00","category":"page"},{"location":"man/propagators/twobody/#References","page":"Two-Body","title":"References","text":"","category":"section"},{"location":"man/propagators/twobody/","page":"Two-Body","title":"Two-Body","text":"[1] Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. 4th ed. Microcosm Press, Hawthorn, CA, USA.","category":"page"},{"location":"lib/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Documentation for SatelliteToolboxPropagators.jl.","category":"page"},{"location":"lib/library/","page":"Library","title":"Library","text":"Modules = [SatelliteToolboxPropagators]","category":"page"},{"location":"lib/library/#SatelliteToolboxPropagators.J2OsculatingPropagator","page":"Library","title":"SatelliteToolboxPropagators.J2OsculatingPropagator","text":"mutable struct J2OsculatingPropagator{Tepoch<:Number, T<:Number}\n\nJ2 osculating orbit propagator structure.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.J2Propagator","page":"Library","title":"SatelliteToolboxPropagators.J2Propagator","text":"mutable struct J2Propagator{Tepoch<:Number, T<:Number}\n\nJ2 orbit propagator structure.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.J2PropagatorConstants","page":"Library","title":"SatelliteToolboxPropagators.J2PropagatorConstants","text":"struct J2PropagatorConstants{T<:Number}\n\nConstants for the J2 orbit propagator.\n\nFields\n\nR0::T: Earth equatorial radius [m].\nμm::T: √(GM / R0^3) [er/s]^(3/2).\nJ2::T: The second gravitational zonal harmonic of the Earth.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.J4Propagator","page":"Library","title":"SatelliteToolboxPropagators.J4Propagator","text":"J4Propagator{Tepoch, T}\n\nJ4 orbit propagator structure.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.J4PropagatorConstants","page":"Library","title":"SatelliteToolboxPropagators.J4PropagatorConstants","text":"struct J4PropagatorConstants{T<:Number}\n\nConstants for the J4 orbit propagator.\n\nFields\n\nR0::T: Earth equatorial radius [m].\nμm::T: √(GM / R0^3) [er/s]^(3/2).\nJ2::T: The second gravitational zonal harmonic of the Earth.\nJ4::T: The fourth gravitational zonal harmonic of the Earth.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.OrbitPropagatorJ2","page":"Library","title":"SatelliteToolboxPropagators.OrbitPropagatorJ2","text":"OrbitPropagatorJ2{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n\nJ2 orbit propagator.\n\nFields\n\nj2d: Structure that stores the J2 orbit propagator data (see J2Propagator).\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.OrbitPropagatorJ2Osculating","page":"Library","title":"SatelliteToolboxPropagators.OrbitPropagatorJ2Osculating","text":"OrbitPropagatorJ2Osculating{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n\nJ2 osculating orbit propagator.\n\nFields\n\nj2oscd: Structure that stores the J2 osculating orbit propagator data (see   J2OsculatingPropagator).\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.OrbitPropagatorJ4","page":"Library","title":"SatelliteToolboxPropagators.OrbitPropagatorJ4","text":"OrbitPropagatorJ4{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n\nJ4 orbit propagator.\n\nFields\n\nj4d: Structure that stores the J4 orbit propagator data (see J4Propagator).\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.OrbitPropagatorSgp4","page":"Library","title":"SatelliteToolboxPropagators.OrbitPropagatorSgp4","text":"OrbitPropagatorSgp4{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n\nSGP4 orbit propagator.\n\nFields\n\nsgp4d: Structure that stores the SGP4 orbit propagator data.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.OrbitPropagatorTwoBody","page":"Library","title":"SatelliteToolboxPropagators.OrbitPropagatorTwoBody","text":"OrbitPropagatorTwoBody{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n\nTwo body orbit propagator.\n\nFields\n\ntbd: Structure that stores the two body orbit propagator data (see   TwoBodyPropagator).\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.TwoBodyPropagator","page":"Library","title":"SatelliteToolboxPropagators.TwoBodyPropagator","text":"mutable struct TwoBodyPropagator{Tepoch<:Number, T<:Number}\n\nTwo body orbit propagator structure.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init","text":"Propagators.init(Val(:J2osc), orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...) -> OrbitPropagatorJ2Osculating\n\nCreate and initialize the J2 osculating orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init-2","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init","text":"Propagators.init(Val(:J2), orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...) -> OrbitPropagatorJ2\n\nCreate and initialize the J2 orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init-3","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init","text":"Propagators.init(Val(:J4), orb₀::Orbit, dn_o4::Number = 0, ddn_o6::Number = 0; kwargs...) -> OrbitPropagatorJ4\n\nCreate and initialize the J4 orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j4c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o4::Number: First time derivative of the mean motion divided by two [rad/s^4].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj4c::J4PropagatorConstants: J4 orbit propagator constants (see J4PropagatorConstants). (Default = j4c_egm2008)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init!","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init!","text":"Propagators.init!(orbp::OrbitPropagatorJ2, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J2 orbit propagator structure orbp using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j2c::J2PropagatorConstants in orbp.j2d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init!-2","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init!","text":"Propagators.init!(orbp::OrbitPropagatorJ4, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J4 orbit propagator structure orbp using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j4c::J4PropagatorConstants in j4d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init!-3","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init!","text":"Propagators.init!(orbp::OrbitPropagatorJ2Osculating, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J2 osculating orbit propagator structure orbp using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j2c::J2PropagatorConstants in orbp.j2d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init!-Tuple{OrbitPropagatorSgp4, TLE}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init!","text":"Propagators.init!(orbp::OrbitPropagatorSgp4, epoch::Number, n₀::Number, e₀::Number, i₀::Number, Ω₀::Number, ω₀::Number, M₀::Number, bstar::Number; kwargs...) -> Nothing\nPropagators.init!(orbp::OrbitPropagatorSgp4, tle::TLE; kwargs...) -> Nothing\n\nInitialize the SGP4 orbit propagator structure orbp using the initial orbit specified by the arguments.\n\nwarning: Warning\nThe propagation constants sgp4c::Sgp4Constants in orbp.sgp4d will not be changed. Hence, they must be initialized.\n\nArguments\n\nepoch::Number: Epoch of the orbital elements [Julian Day].\nn₀::Number: SGP type \"mean\" mean motion at epoch [rad/s].\ne₀::Number: \"Mean\" eccentricity at epoch.\ni₀::Number: \"Mean\" inclination at epoch [rad].\nΩ₀::Number: \"Mean\" longitude of the ascending node at epoch [rad].\nω₀::Number: \"Mean\" argument of perigee at epoch [rad].\nM₀::Number: \"Mean\" mean anomaly at epoch [rad].\nbstar::Number: Drag parameter (B*).\ntle::TLE: Two-line elements used for the initialization.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init!-Tuple{OrbitPropagatorTwoBody, KeplerianElements}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init!","text":"Propagators.init!(orbp::OrbitPropagatorTwoBody, orb₀::KeplerianElements) -> Nothing\n\nInitialize the two-body orbit propagator structure orbp using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constant μ::Number in tbd will not be changed. Hence, it must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init-Tuple{Val{:SGP4}, TLE}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init","text":"Propagators.init(Val(:SGP4), epoch::Number, n₀::Number, e₀::Number, i₀::Number, Ω₀::Number, ω₀::Number, M₀::Number, bstar::Number; kwargs...) -> OrbitPropagatorSgp4\nPropagators.init(Val(:SGP4), tle::TLE; kwargs...) -> OrbitPropagatorSgp4\n\nCreate and initialize the SGP4 orbit propagator structure using the initial orbit specified by the arguments.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure sgp4c.\n\nArguments\n\nepoch::Number: Epoch of the orbital elements [Julian Day].\nn₀::Number: SGP type \"mean\" mean motion at epoch [rad/s].\ne₀::Number: \"Mean\" eccentricity at epoch.\ni₀::Number: \"Mean\" inclination at epoch [rad].\nΩ₀::Number: \"Mean\" longitude of the ascending node at epoch [rad].\nω₀::Number: \"Mean\" argument of perigee at epoch [rad].\nM₀::Number: \"Mean\" mean anomaly at epoch [rad].\nbstar::Number: Drag parameter (B*).\ntle::TLE: Two-line elements used for the initialization.\n\nKeywords\n\nsgp4c::Sgp4Constants: SGP4 orbit propagator constants (see Sgp4Constants).   (Default = sgp4c_wgs84)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.init-Tuple{Val{:TwoBody}, KeplerianElements}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.init","text":"Propagators.init(Val(:TwoBody), orb₀::KeplerianElements; kwargs...) -> OrbitPropagatorTwoBody\n\nCreate and initialize the two-body orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the gravitational constant μ.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\nKeywords\n\nμ::T: Standard gravitational parameter of the central body [m³/s²].   (Default = tbc_m0)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.propagate","page":"Library","title":"SatelliteToolboxPropagators.Propagators.propagate","text":"Propagators.propagate(Val(:J2osc), Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J2 osculating propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants{T}: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nOrbitPropagatorJ2Osculating: Structure with the initialized parameters.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.propagate-2","page":"Library","title":"SatelliteToolboxPropagators.Propagators.propagate","text":"Propagators.propagate(Val(:J2), Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J2 propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants{T}: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nOrbitPropagatorJ2: Structure with the initialized parameters.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.propagate-3","page":"Library","title":"SatelliteToolboxPropagators.Propagators.propagate","text":"Propagators.propagate(Val(:J4), Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J4 propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j4c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^4].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj4c::J4PropagatorConstants{T}: J4 orbit propagator constants (see J4PropagatorConstants). (Default = j4c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nOrbitPropagatorJ4: Structure with the initialized parameters.\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.propagate-Tuple{Val{:SGP4}, Number, TLE}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.propagate","text":"Propagators.propagate(Val(:SGP4), Δt::Number, epoch::Number, n₀::Number, e₀::Number, i₀::Number, Ω₀::Number, ω₀::Number, M₀::Number, bstar::Number; kwargs...)\nPropagators.propagate(Val(:SGP4), Δt::Number, tle::TLE; kwargs...)\n\nInitialize the SGP4 propagator structure using the input arguments and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure sgp4c.\n\nArguments\n\nepoch::Number: Epoch of the orbital elements [Julian Day].\nn₀::Number: SGP type \"mean\" mean motion at epoch [rad/s].\ne₀::Number: \"Mean\" eccentricity at epoch.\ni₀::Number: \"Mean\" inclination at epoch [rad].\nΩ₀::Number: \"Mean\" longitude of the ascending node at epoch [rad].\nω₀::Number: \"Mean\" argument of perigee at epoch [rad].\nM₀::Number: \"Mean\" mean anomaly at epoch [rad].\nbstar::Number: Drag parameter (B*).\ntle::TLE: Two-line elements used for the initialization.\n\nKeywords\n\nsgp4c::Sgp4Constants{T}: SGP4 orbit propagator constants (see Sgp4Constants).   (Default = sgp4c_wgs84)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nOrbitPropagatorSgp4: Structure with the initialized parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.Propagators.propagate-Tuple{Val{:TwoBody}, Number, KeplerianElements}","page":"Library","title":"SatelliteToolboxPropagators.Propagators.propagate","text":"Propagators.propagate(Val(:TwoBody), Δt::Number, orb₀::KeplerianElements; kwargs...)\n\nInitialize the two-body propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the gravitational constant μ.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\nKeywords\n\nμ::T: Standard gravitational parameter of the central body [m³/s²].   (Default = tbc_m0)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nTwoBodyPropagator: Structure with the initialized parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J2Propagator{Tepoch, T}, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2!","text":"j2!(j2d::J2Propagator{Tepoch, T}, t::Number) where {Tepoch, T} -> SVector{3, T}, SVector{3, T}\n\nPropagate the orbit defined in j2d (see J2Propagator) to t [s] after the epoch of the input mean elements in j2d.\n\nnote: Note\nThe internal values in j2d will be modified.\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2-Union{Tuple{T}, Tuple{Number, KeplerianElements}, Tuple{Number, KeplerianElements, Number}, Tuple{Number, KeplerianElements, Number, Number}} where T<:Number","page":"Library","title":"SatelliteToolboxPropagators.j2","text":"j2(Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J2 propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants{T}: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nJ2Propagator: Structure with the initialized parameters.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2_init!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J2Propagator{Tepoch, T}, KeplerianElements}, Tuple{J2Propagator{Tepoch, T}, KeplerianElements, Number}, Tuple{J2Propagator{Tepoch, T}, KeplerianElements, Number, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2_init!","text":"j2_init!(j2d::J2Propagator, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J2 orbit propagator structure j2d using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j2c::J2PropagatorConstants in j2d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2_init-Union{Tuple{KeplerianElements{Tepoch, Tkepler}}, Tuple{T}, Tuple{Tkepler}, Tuple{Tepoch}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number, Number}} where {Tepoch<:Number, Tkepler<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2_init","text":"j2_init(orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...) where T<:Number -> J2Propagator\n\nCreate and initialize the J2 orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2osc!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J2OsculatingPropagator{Tepoch, T}, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2osc!","text":"j2osc!(j2oscd::J2OsculatingPropagator{Tepoch, T}, t::Number) where {Tepoch, T} -> SVector{3, T}, SVector{3, T}\n\nPropagate the orbit defined in j2oscd (see J2OsculatingPropagator) to t [s] after the epoch of the input mean elements in j2d.\n\nnote: Note\nThe internal values in j2oscd will be modified.\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2osc-Union{Tuple{T}, Tuple{Number, KeplerianElements}, Tuple{Number, KeplerianElements, Number}, Tuple{Number, KeplerianElements, Number, Number}} where T<:Number","page":"Library","title":"SatelliteToolboxPropagators.j2osc","text":"j2osc(Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J2 osculating propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants{T}: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nJ2OsculatingPropagator: Structure with the initialized parameters.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2osc_init!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J2OsculatingPropagator{Tepoch, T}, KeplerianElements}, Tuple{J2OsculatingPropagator{Tepoch, T}, KeplerianElements, Number}, Tuple{J2OsculatingPropagator{Tepoch, T}, KeplerianElements, Number, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2osc_init!","text":"j2osc_init!(j2oscd::J2OsculatingPropagator, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J2 osculating orbit propagator structure j2oscd using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j2c::J2PropagatorConstants in j2oscd.j2d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j2osc_init-Union{Tuple{KeplerianElements{Tepoch, Tkepler}}, Tuple{T}, Tuple{Tkepler}, Tuple{Tepoch}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number, Number}} where {Tepoch<:Number, Tkepler<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j2osc_init","text":"j2osc_init(orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...) where T<:Number -> J2OsculatingPropagator\n\nCreate and initialize the J2 osculating orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj2c::J2PropagatorConstants: J2 orbit propagator constants (see   J2PropagatorConstants). (Default = j2c_egm2008)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j4!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J4Propagator{Tepoch, T}, Number}} where {Tepoch, T}","page":"Library","title":"SatelliteToolboxPropagators.j4!","text":"j4!(j4d::J4Propagator{Tepoch, T}, t::Number) where {Tepoch, T} -> SVector{3, T}, SVector{3, T}\n\nPropagate the orbit defined in j4d (see J4Propagator) to t [s] after the epoch of the input mean elements in j4d.\n\nnote: Note\nThe internal values in j4d will be modified.\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j4-Union{Tuple{T}, Tuple{Number, KeplerianElements}, Tuple{Number, KeplerianElements, Number}, Tuple{Number, KeplerianElements, Number, Number}} where T<:Number","page":"Library","title":"SatelliteToolboxPropagators.j4","text":"j4(Δt::Number, orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)\n\nInitialize the J4 propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j4c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^4].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj4c::J4PropagatorConstants{T}: J4 orbit propagator constants (see J4PropagatorConstants). (Default = j4c_egm2008)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nJ4Propagator: Structure with the initialized parameters.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j4_init!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{J4Propagator{Tepoch, T}, KeplerianElements}, Tuple{J4Propagator{Tepoch, T}, KeplerianElements, Number}, Tuple{J4Propagator{Tepoch, T}, KeplerianElements, Number, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j4_init!","text":"j4_init!(j4d::J4Propagator, orb₀::KeplerianElements, dn_o4::Number = 0, ddn_o6::Number = 0) -> Nothing\n\nInitialize the J4 orbit propagator structure j4d using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constants j4c::J4PropagatorConstants in j4d will not be changed. Hence, they must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.j4_init-Union{Tuple{KeplerianElements{Tepoch, Tkepler}}, Tuple{T}, Tuple{Tkepler}, Tuple{Tepoch}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number}, Tuple{KeplerianElements{Tepoch, Tkepler}, Number, Number}} where {Tepoch<:Number, Tkepler<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.j4_init","text":"j4_init(orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...) where T<:Number -> J4Propagator\n\nCreate and initialize the J4 orbit propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j4c.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)\n\nKeywords\n\nj4c::J4PropagatorConstants: J4 orbit propagator constants (see J4PropagatorConstants). (Default = j4c_egm2008)\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.twobody!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{TwoBodyPropagator{Tepoch, T}, Number}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.twobody!","text":"twobody!(tbd::TwoBodyPropagator{Tepoch, T}, t::Number) where {Tepoch, T}\n\nPropagate the orbit defined in tbd (see TwoBodyPropagator) to t [s] after the epoch of the input mean elements in tbd.\n\nnote: Note\nThe internal values in tbd will be modified.\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.twobody-Union{Tuple{T}, Tuple{Number, KeplerianElements}} where T<:Number","page":"Library","title":"SatelliteToolboxPropagators.twobody","text":"twobody(Δt::Number, orb₀::KeplerianElements; kwargs...)\n\nInitialize the two-body propagator structure using the input elements orb₀ and propagate the orbit until the time Δt [s].\n\nnote: Note\nThe type used in the propagation will be the same as used to define the gravitational constant μ.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\nKeywords\n\nμ::T: Standard gravitational parameter of the central body [m³/s²].   (Default = tbc_m0)\n\nReturns\n\nSVector{3, T}: Position vector [m] represented in the inertial frame at propagation   instant.\nSVector{3, T}: Velocity vector [m / s] represented in the inertial frame at propagation   instant.\nTwoBodyPropagator: Structure with the initialized parameters.\n\nRemarks\n\nThe inertial frame in which the output is represented depends on which frame it was used to generate the orbit parameters. Notice that the perturbation theory requires an inertial frame with true equator.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.twobody_init!-Union{Tuple{T}, Tuple{Tepoch}, Tuple{TwoBodyPropagator{Tepoch, T}, KeplerianElements}} where {Tepoch<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.twobody_init!","text":"twobody_init!(tbd::TwoBodyPropagator, orb₀::KeplerianElements; kwargs...) -> Nothing\n\nInitialize the two-body propagator structure tbd using the mean Keplerian elements orb₀.\n\nwarning: Warning\nThe propagation constant μ::Number in tbd will not be changed. Hence, it must be initialized.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#SatelliteToolboxPropagators.twobody_init-Union{Tuple{KeplerianElements{Tepoch, Tkepler}}, Tuple{T}, Tuple{Tkepler}, Tuple{Tepoch}} where {Tepoch<:Number, Tkepler<:Number, T<:Number}","page":"Library","title":"SatelliteToolboxPropagators.twobody_init","text":"twobody_init(orb₀::KeplerianElements; kwargs...) -> TwoBodyPropagator\n\nCreate and initialize the two-body propagator structure using the mean Keplerian elements orb₀.\n\nnote: Note\nThe type used in the propagation will be the same as used to define the gravitational constant μ.\n\nArguments\n\norb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\n\nKeywords\n\nμ::T: Standard gravitational parameter of the central body [m³/s²].   (Default = tbc_m0)\n\n\n\n\n\n","category":"method"},{"location":"man/propagators/j2/#J2_Propagator","page":"J2","title":"J2 Analytical Orbit Propagator","text":"","category":"section"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"The J2 analytical orbit propagator considers only the J2 perturbation term of the geopotential field to obtain a simple analytic solution for propagating the mean orbital elements. It has low precision but is extremely useful during mission design. For example, when designing a Sun-Synchronous orbit for a remote sensing mission, the satellite usually has a propulsion subsystem to maintain its orbit. Hence, the J2 propagator solution can be used as the nominal orbit through the mission lifetime to perform initial studies.","category":"page"},{"location":"man/propagators/j2/#Algorithm","page":"J2","title":"Algorithm","text":"","category":"section"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"The algorithm implemented here is based on [1, 2]. This version takes into account only the secular effects in the orbit elements.","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"After neglecting all terms with higher order than J2, we obtain that only the right accession of the ascending node (RAAN), the argument of perigee, and mean motion are perturbed by the geopotential field with secular effects. However, we also include the possibility of inputting the mean motion time derivatives to consider effects like energy dissipation by air drag.  Hence, the algorithm propagates the mean elements using the following equations:","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"beginaligned\n  a(t)       = a_0 - frac23 cdot fracdotnn_0 cdot a_0 cdot left(t - t_0right) \n  e(t)       = e_0 - frac23 cdot left(1 - e_0right) cdot fracdotnn_0 cdot left(t - t_0right) \n  barn(t) = n_0 cdot left1 + frac34 cdot J_2 cdot left(fracR_0p_0right)^2 cdot sqrt1 - e_0^2 cdot left(2 - 3sini_0^2right)right cdot left(t - t_0right) \n  Omega(t)  = Omega_0 - frac23 cdot J_2 cdot left(fracR_0p_0right)^2 cdot barn cdot cosi_0 cdot left(t - t_0right) \n  omega(t)  = omega_0 + frac34 cdot J_2 cdot left(fracR_0p_0right)^2 cdot left(4 - 5sini_0^2right) cdot left(t - t_0right) \n  M(t)       = M_0 + barn cdot left(t - t_0right) + fracdotn2 cdot left(t - t_0right)^2 + fracddotn6 cdot left(t - t_0right)^3 \nendaligned","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"where the subscript _0 indicates the initial element, t_0 is the initial mean elements' epoch, a is the mean semi-major axis, n is mean motion, barn is the perturbed mean motion, e is the eccentricity, p is the semi-latus rectum, R_0 is the Earth's equatorial radius, Omega is the RAAN, and M is the mean anomaly.","category":"page"},{"location":"man/propagators/j2/#Initialization","page":"J2","title":"Initialization","text":"","category":"section"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"We can initialize the J2 analytical orbit propagator with the following function:","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"function Propagators.init(Val(:J2), orb₀::KeplerianElements, dn_o2::Number = 0, ddn_o6::Number = 0; kwargs...)","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"which creates a J2 propagator structure OrbitPropagatorJ2 with the mean Keplerian elements orb₀. It supports the following positional arguments:","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"orb₀::KeplerianElements: Initial mean Keplerian elements [SI units].\ndn_o2::Number: First time derivative of the mean motion divided by two [rad/s^2].   (Default = 0)\nddn_o6::Number: Second time derivative of the mean motion divided by six [rad/s^3].   (Default = 0)","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"The following keyword selects the gravitational constants for the propagation algorithm:","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"j2c::J2PropagatorConstants: J2 orbit propagator constants (see J2PropagatorConstants). (Default = j2c_egm2008)","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"This package contains some pre-built propagation constants for this propagator:","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"J2 Propagator Constant Description Type\nj2c_egm2008 EGM-2008 gravitational constants Float64\nj2c_egm2008_f32 EGM-2008 gravitational constants Float32\nj2c_egm1996 EGM-1996 gravitational constants Float64\nj2c_egm1996_f32 EGM-1996 gravitational constants Float32\nj2c_jgm02 JGM-02 gravitational constants Float64\nj2c_jgm02_f32 JGM-02 gravitational constants Float32\nj2c_jgm03 JGM-03 gravitational constants Float64\nj2c_jgm03_f32 JGM-03 gravitational constants Float32","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"note: Note\nThe type used in the propagation will be the same as used to define the constants in the structure j2c.","category":"page"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"julia> orb = KeplerianElements(\n           date_to_jd(2023, 1, 1, 0, 0, 0),\n           7190.982e3,\n           0.001111,\n           98.405 |> deg2rad,\n           100    |> deg2rad,\n           90     |> deg2rad,\n           19     |> deg2rad\n       )\nKeplerianElements{Float64, Float64}:\n           Epoch :    2.45995e6 (2023-01-01T00:00:00)\n Semi-major axis : 7190.98     km\n    Eccentricity :    0.001111\n     Inclination :   98.405    °\n            RAAN :  100.0      °\n Arg. of Perigee :   90.0      °\n    True Anomaly :   19.0      °\n\njulia> orbp = Propagators.init(Val(:J2), orb; j2c = j2c_jgm03)\nOrbitPropagatorJ2{Float64, Float64}:\n   Propagator name : J2 Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-01T00:00:00","category":"page"},{"location":"man/propagators/j2/#References","page":"J2","title":"References","text":"","category":"section"},{"location":"man/propagators/j2/","page":"J2","title":"J2","text":"[1] Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. 4th ed. Microcosm Press, Hawthorn, CA, USA.\n[2] Wertz, J. R (1978). Spacecraft Attitude Determination and Control. Kluwer Academic Publishers, Dordrecht, The Netherlands.","category":"page"},{"location":"man/propagators/j4/#J4-Analytical-Orbit-Propagator","page":"J4","title":"J4 Analytical Orbit Propagator","text":"","category":"section"},{"location":"man/propagators/j4/","page":"J4","title":"J4","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/propagators/j4/","page":"J4","title":"J4","text":"The J4 analytical orbit propagator considers the perturbation caused by the terms J_2, J_2^2, and J_4. It is a slightly more precise version of the J2 analytical orbit propagator useful for mission design and analysis.","category":"page"},{"location":"man/propagators/j4/#Algorithm","page":"J4","title":"Algorithm","text":"","category":"section"},{"location":"man/propagators/j4/","page":"J4","title":"J4","text":"The algorithm implemented here is based on [1, 2]. This version takes into account only the secular effects in the orbit elements.","category":"page"},{"location":"man/propagators/j4/","page":"J4","title":"J4","text":"Considering only the terms J_2, J_2^2, and J_4, we obtain that only the right accession of the ascending node (RAAN), the argument of perigee, and mean motion are perturbed by the geopotential field with secular effects. However, we also include the possibility of inputting the mean motion time derivatives to consider the impact like energy dissipation by air drag.  The complete algorithm is available in [1, pp. 647-654, 692-693] where we assumed J_6 = 0.","category":"page"},{"location":"man/propagators/j4/#References","page":"J4","title":"References","text":"","category":"section"},{"location":"man/propagators/j4/","page":"J4","title":"J4","text":"[1] Vallado, D. A (2013). Fundamentals of Astrodynamics and Applications. 4th ed. Microcosm Press, Hawthorn, CA, USA.\n[2] Hoots, F. R., Roehrich, R. L (1980). *Models for Propagation of NORAD Elements Set. **Spacetrack Report No. 3.","category":"page"},{"location":"man/usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"All the propagators can be accessed using the available API, which allows to initialize and propagate the orbit.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"All the API function are available inside the module Propagators that is exported by this package.","category":"page"},{"location":"man/usage/#Initialization","page":"Usage","title":"Initialization","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"We can initialize an orbit propagator using the function:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function Propagators.init(::Val{:propagator}, args...; kwargs...)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"It initializes a propagator of type :propagator using the arguments args... and keywords kwargs... supported by it. Currently, the following algorithms are available:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Propagator Name Symbol\nJ2 analytical orbit propagator :J2\nJ2 osculating analytical orbit propagator :J2osc\nJ4 analytical orbit propagator :J4\nSGP4/SDP4 orbit propagator :SGP4\nTwo body analytical orbit propagator :TwoBody","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"See the documentation of each algorithm to verify the supported arguments and keywords.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, a J2 analytical orbit propagator can be initialized with a set of mean elements as follows:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> orb = KeplerianElements(\n           date_to_jd(2023, 1, 1, 0, 0, 0),\n           7190.982e3,\n           0.001111,\n           98.405 |> deg2rad,\n           100    |> deg2rad,\n           90     |> deg2rad,\n           19     |> deg2rad\n       )\nKeplerianElements{Float64, Float64}:\n           Epoch :    2.45995e6 (2023-01-01T00:00:00)\n Semi-major axis : 7190.98     km\n    Eccentricity :    0.001111\n     Inclination :   98.405    °\n            RAAN :  100.0      °\n Arg. of Perigee :   90.0      °\n    True Anomaly :   19.0      °\n\njulia> orbp = Propagators.init(Val(:J2), orb)\nOrbitPropagatorJ2{Float64, Float64}:\n   Propagator name : J2 Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-01T00:00:00","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"We also have the function:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function init!(orbp::OrbitPropagator, args...; kwargs...)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"that initializes the propagator orbp in-place using the arguments args... and keywords kwargs.... This function allows to reduce the memory allocation when performing multiple initialization. However, notice that this function is optional in the propagator API. Hence, some algorithms might not support it.","category":"page"},{"location":"man/usage/#Propagate-the-Orbit","page":"Usage","title":"Propagate the Orbit","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"After the initialization, we can propagate the orbit using some functions as follows.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function propagate!(orbp::OrbitPropagator{Tepoch, T}, t::Number) where {Tepoch, T}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"This function propagates the orbit using orbp by t [s] from the initial orbit epoch. It returns two vectors: the position [m] and velocity [m/s]. Both are represented in the same inertial reference frame used to describe the input data during the propagator initialization.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, using the initialized propagator, we can propagate the orbit by 6000s as follows:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.propagate!(orbp, 6000)\n([1.3152752189693751e6, -1.5933886600051078e6, 6.8797020668377e6], [993.0153602143952, -7152.788090016819, -1844.2917380794433])","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function propagate_to_epoch!(orbp::OrbitPropagator{Tepoch, T}, jd::Number) where {Tepoch, T}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"This function propagates the orbit using orbp until the epoch jd [Julian Day]. It returns two vectors: the position [m] and velocity [m/s]. Both are represented in the same inertial reference frame used to describe the input data during the propagator initialization.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, using the initialized propagator, we can propagate the orbit to 2023-01-02T00:00:00 as follows:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.propagate_to_epoch!(orbp, date_to_jd(2023, 1, 2, 0, 0, 0))\n([1.2007441457621562e6, -7.014291058654364e6, -1.0443532029853627e6], [-1262.9147609767083, 860.1551065186032, -7285.029142259778])","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function step!(orbp::OrbitPropagator{Tepoch, T}, Δt::Number) where {Tepoch, T}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Every time we propagate the orbit, the propagation instant is recorded inside the structure. Hence, we can use the function step! to propagate the orbit by Δt [s] from the current orbit epoch. It returns two vectors: the position [m] and velocity [m/s]. Both are represented in the same inertial reference frame used to describe the input data during the propagator initialization.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, using the initialized propagator, we can advance the propagation by 60 s as follows:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> orbp\nOrbitPropagatorJ2{Float64, Float64}:\n   Propagator name : J2 Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-02T00:00:00\n\njulia> Propagators.step!(orbp, 60)\n([1.1228778966719273e6, -6.949273896376436e6, -1.4786561473080558e6], [-1337.5317183567313, 1308.4670676524293, -7204.023280682461])\n\njulia> orbp\nOrbitPropagatorJ2{Float64, Float64}:\n   Propagator name : J2 Orbit Propagator\n  Propagator epoch : 2023-01-01T00:00:00\n  Last propagation : 2023-01-02T00:01:00","category":"page"},{"location":"man/usage/#Simultaneous-Initialization-and-Propagation","page":"Usage","title":"Simultaneous Initialization and Propagation","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"We can use the following functions to simultaneously initialize and propagate the orbit:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function propagate(::Val{:propagator}, Δt::Number, args...; kwargs...)\nfunction propagate_to_epoch(::Val{:propagator}, jd::Number, args...; kwargs...)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The symbol :propagator, the arguments args..., and the keywords kwargs... are the same as described in the section related to the propagator initialization.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"The first function propagates the orbit by Δt [s] from the initial epoch, whereas the second propagated the orbit until the instant jd [Julian Day].","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"Both functions returns the position vector [m], the velocity vector [m/s], and the initialized propagator structure. Notice that both vectors are represented in the same inertial reference frame used to describe the input data for the initialization.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"However, notice that those functions are optional in the propagator API. Hence, some propagators might not support them.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"For example, we can propagate by 60 s a set of mean elements using a J2 analytical propagator as follows:","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.propagate(Val(:J2), 60, orb)\n([1.433577581999473e6, -2.5460150747451796e6, 6.562531225282293e6], [784.1942683097858, -6851.527297258612, -2825.9666374272706], J2 Orbit Propagator (Epoch = 2023-01-01T00:00:00, Δt = 60.0 s))","category":"page"},{"location":"man/usage/#Helpers","page":"Usage","title":"Helpers","text":"","category":"section"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"We have the following functions that provide some useful information related to the propagators.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function epoch(orbp::OrbitPropagator{Tepoch, T}) where {Tepoch<:Number, T<:Number}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"It returns the initial elements' epoch of the propagator orbp [JD].","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.epoch(orbp)\n2.4599455e6","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function last_instant(orbp::OrbitPropagator{Tepoch, T}) where {Tepoch<:Number, T<:Number}","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"It returns the last propagation instant [s] measured from the input elements' epoch.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.last_instant(orbp)\n86460.0","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function name(orbp::OrbitPropagator)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"It returns the propagator name.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.name(orbp)\n\"J2 Orbit Propagator\"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"function mean_elements(orbp::OrbitPropagator)","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"It returns the mean elements using the structure KeplerianElements of the latest propagation performed by orbp. Notice that this is an optional funciton in the propagators' API. If a propagator does not support it, this function returns nothing.","category":"page"},{"location":"man/usage/","page":"Usage","title":"Usage","text":"julia> Propagators.mean_elements(orbp)\nKeplerianElements{Float64, Float64}:\n           Epoch :    2.45995e6 (2023-01-02T00:01:00)\n Semi-major axis : 7190.98     km\n    Eccentricity :    0.001111\n     Inclination :   98.405    °\n            RAAN :  100.957    °\n Arg. of Perigee :   87.0755   °\n    True Anomaly :  104.918    °","category":"page"},{"location":"#SatelliteToolboxPropagators.jl","page":"Home","title":"SatelliteToolboxPropagators.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This packages contains orbit propagators for the SatelliteToolbox.jl ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The current supported propagators are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"J2 analytical orbit propagator;\nJ2 osculating analytical orbit propagator;\nJ4 analytical orbit propagator;\nSGP4/SDP4 orbit propagator; and\nTwo body analytical orbit propagator.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.install(\"SatelliteToolboxPropagators\")","category":"page"},{"location":"man/API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"SatelliteToolboxPropagators.jl has a propagator API to improve the usability. This API has the following requirements, which must be met by all propagators that uses it.","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Every propagator must have a structure derived from OrbitPropagator with the following requirement:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"struct OrbitPropagator<Propagator name>{Tepoch, T} <: OrbitPropagator{Tepoch, T}\n    <Any field required by the propagator>\nend","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"where Tepoch is the type used to represent the epoch of the input elements, whereas T is the type used for the internal variables.","category":"page"},{"location":"man/API/#Initialization","page":"API","title":"Initialization","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"The initialization is performed by the function:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.init(T, args...; kwargs...)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"where T = Val(<Orbit propagator symbol>), and it must return and object of type OrbitPropagator<Propagator name>. The arguments and keywords depends on the propagator and must be documented in the docstring. The propagator must record the epoch during the initialization, which must be kept constant during the entire object existence. It also needs to record the instant of the last propagation.","category":"page"},{"location":"man/API/#Epoch","page":"API","title":"Epoch","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"Each propagator must return the initial element epoch in Julian Day by the function:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.epoch(orbp)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Notice that this value must never change during the existence of the object orbp.","category":"page"},{"location":"man/API/#Last-Instant","page":"API","title":"Last Instant","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"Each propagator must return the last propagation instant [s] measured from the epoch. This action must be performed by the function:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.last_instant(orbp)","category":"page"},{"location":"man/API/#Propagation","page":"API","title":"Propagation","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"The following functions must be overloaded by each propagator.","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.propagate!(orbp, t)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagate the orbit of propagator orbp by t [s] from the epoch. This function must return the propagated position and velocity represented in the same reference frame used in the initialization. The output vector must use the SI.","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.step!(orbp, dt)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagate the orbit of propagator orbp by dt [s] from the instant of the last propagation. This function must return the propagated position and velocity represented in the same reference frame used in the initialization. The output vector must use the SI.","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Note The API provides a default implementation for Propagators.step!. Hence, strictly speaking, only the implementation of Propagators.propagate! is required for the API. However, there are some cases in which it is more accurate to implement Propagators.step! and use this algorithm to build the function Propagators.propagate!. In those cases, the user must overload both functions.","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"We also have the function Propagators.propagate_to_epoch!, but the default implementation should work for all propagators.","category":"page"},{"location":"man/API/#In-place-initialization-(Optional)","page":"API","title":"In-place initialization (Optional)","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"If the propagator supports in-place initialization, it must overload the following function:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.init!(orbp::OrbitPropagator<Propagator name>, args...; kwargs...)","category":"page"},{"location":"man/API/#Mean-Elements-(Optional)","page":"API","title":"Mean Elements (Optional)","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"The function","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.mean_elements(orbp)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"should return the mean elements using the structure KeplerianElements related to the latest propagation. Notice that this is an optional feature. If the propagator does not implement it, it will return nothing.","category":"page"},{"location":"man/API/#Name-(Optional)","page":"API","title":"Name (Optional)","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"The propagator can overload the function:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.name(orbp)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"to return its name. The system uses this information to display the object using the function show. If the function is not provided, the structure name is used by default.","category":"page"},{"location":"man/API/#Simultaneous-Initialization-and-Propagation-(Optional)","page":"API","title":"Simultaneous Initialization and Propagation (Optional)","text":"","category":"section"},{"location":"man/API/","page":"API","title":"API","text":"If the propagator supports, it can overload the functions:","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"Propagators.propagate(t, args...; kwargs...)","category":"page"},{"location":"man/API/","page":"API","title":"API","text":"that simultaneously initialize and propagate the orbit to the instant t [s] after the input elements. args... and kwargs... must be the same as in the initialization function Propagators.init.","category":"page"},{"location":"man/quick_start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"CurrentModule = SatelliteToolboxPropagators\nDocTestSetup = quote\n    using SatelliteToolboxPropagators\nend","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"Let's suppose we want to discover the ISS position on May 19, 2013, at 12:00:00. First, we need to obtain a description of its orbit and use the corresponding propagator. Using the Celestrak service, for example, we can obtain the ISS TLE on May 18, 2023:","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"ISS (ZARYA)             \n1 25544U 98067A   23138.86946505 -.00404279  00000+0 -74572-2 0  9994\n2 25544  51.6431 113.8899 0006661 357.1286  88.0982 15.49924990397244","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"Since we have a TLE, we must use the SGP4/SDP4 propagator. Let's initialize the algorithm first:","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> iss_tle = tle\"\"\"\n       ISS (ZARYA)             \n       1 25544U 98067A   23138.86946505 -.00404279  00000+0 -74572-2 0  9994\n       2 25544  51.6431 113.8899 0006661 357.1286  88.0982 15.49924990397244\"\"\"\nTLE:\n                     Name : ISS (ZARYA)\n         Satellite number : 25544\n International designator : 98067A\n       Epoch (Year / Day) : 23 / 138.86946505 (2023-05-18T20:52:01.780)\n       Element set number : 999\n             Eccentricity :   0.00066610 deg\n              Inclination :  51.64310000 deg\n                     RAAN : 113.88990000 deg\n      Argument of perigee : 357.12860000 deg\n             Mean anomaly :  88.09820000 deg\n          Mean motion (n) :  15.49924990 revs/day\n        Revolution number : 39724\n                       B* : -0.007457 1/[er]\n                    ṅ / 2 : -0.004043 rev/day²\n                    n̈ / 6 : 0.000000 rev/day³\n\njulia> orbp = Propagators.init(Val(:SGP4), iss_tle)\nOrbitPropagatorSgp4{Float64, Float64}:\n   Propagator name : SGP4 Orbit Propagator\n  Propagator epoch : 2023-05-18T20:52:01.780\n  Last propagation : 2023-05-18T20:52:01.780","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"Now we can propagate the ISS orbit to the desired epoch and obtain its state vector and mean elements:","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"julia> Propagators.propagate_to_epoch!(orbp, date_to_jd(2023, 5, 19, 12, 0, 0))\n([-2.7473591812349055e6, 6.194023092402147e6, 470636.34213714604], [-4186.242303388817, -2319.0180933770293, 5989.510493513584])\n\njulia> Propagators.mean_elements(orbp)\nKeplerianElements{Float64, Float64}:\n           Epoch :   2.46008e6 (2023-05-18T21:07:09.751)\n Semi-major axis :   6.79714     km\n    Eccentricity :   0.000670975\n     Inclination :  51.6627      °\n            RAAN : 110.771       °\n Arg. of Perigee : 359.796       °\n    True Anomaly :   5.97883     °","category":"page"},{"location":"man/quick_start/","page":"Quick Start","title":"Quick Start","text":"note: Note\nSince we are using a TLE, the state vector is represented in the TEME reference frame.","category":"page"}]
}
